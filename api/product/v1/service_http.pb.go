// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             v3.21.0
// source: api/product/v1/service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationProductServiceAutocompleteSearch = "/product.v1.ProductService/AutocompleteSearch"
const OperationProductServiceCreateGoods = "/product.v1.ProductService/CreateGoods"
const OperationProductServiceDeleteGoods = "/product.v1.ProductService/DeleteGoods"
const OperationProductServiceGoodsList = "/product.v1.ProductService/GoodsList"
const OperationProductServiceSearchGoods = "/product.v1.ProductService/SearchGoods"
const OperationProductServiceUpdateGoods = "/product.v1.ProductService/UpdateGoods"

type ProductServiceHTTPServer interface {
	// AutocompleteSearch 自动补全搜索词
	AutocompleteSearch(context.Context, *AutoCompleteRequest) (*AutoCompleteResponse, error)
	// CreateGoods 创建新商品
	CreateGoods(context.Context, *CreateGoodsRequest) (*CreateGoodsResponse, error)
	// DeleteGoods 删除商品
	DeleteGoods(context.Context, *DeleteGoodsRequest) (*DeleteGoodsResponse, error)
	// GoodsList 获取商品列表
	GoodsList(context.Context, *GoodsFilterRequest) (*GoodsListResponse, error)
	// SearchGoods 搜索商品
	SearchGoods(context.Context, *SearchGoodsRequest) (*SearchGoodsResponse, error)
	// UpdateGoods 更新现有商品
	UpdateGoods(context.Context, *UpdateGoodsRequest) (*UpdateGoodsResponse, error)
}

func RegisterProductServiceHTTPServer(s *http.Server, srv ProductServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/goods", _ProductService_CreateGoods0_HTTP_Handler(srv))
	r.GET("/v1/goods", _ProductService_GoodsList0_HTTP_Handler(srv))
	r.PUT("/v1/goods/{id}", _ProductService_UpdateGoods0_HTTP_Handler(srv))
	r.DELETE("/v1/goods/{id}", _ProductService_DeleteGoods0_HTTP_Handler(srv))
	r.POST("/v1/goods/search", _ProductService_SearchGoods0_HTTP_Handler(srv))
	r.GET("/v1/goods/autocomplete", _ProductService_AutocompleteSearch0_HTTP_Handler(srv))
}

func _ProductService_CreateGoods0_HTTP_Handler(srv ProductServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateGoodsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductServiceCreateGoods)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateGoods(ctx, req.(*CreateGoodsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateGoodsResponse)
		return ctx.Result(200, reply)
	}
}

func _ProductService_GoodsList0_HTTP_Handler(srv ProductServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GoodsFilterRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductServiceGoodsList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GoodsList(ctx, req.(*GoodsFilterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GoodsListResponse)
		return ctx.Result(200, reply)
	}
}

func _ProductService_UpdateGoods0_HTTP_Handler(srv ProductServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateGoodsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductServiceUpdateGoods)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateGoods(ctx, req.(*UpdateGoodsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateGoodsResponse)
		return ctx.Result(200, reply)
	}
}

func _ProductService_DeleteGoods0_HTTP_Handler(srv ProductServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteGoodsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductServiceDeleteGoods)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteGoods(ctx, req.(*DeleteGoodsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteGoodsResponse)
		return ctx.Result(200, reply)
	}
}

func _ProductService_SearchGoods0_HTTP_Handler(srv ProductServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchGoodsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductServiceSearchGoods)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchGoods(ctx, req.(*SearchGoodsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchGoodsResponse)
		return ctx.Result(200, reply)
	}
}

func _ProductService_AutocompleteSearch0_HTTP_Handler(srv ProductServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AutoCompleteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductServiceAutocompleteSearch)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AutocompleteSearch(ctx, req.(*AutoCompleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AutoCompleteResponse)
		return ctx.Result(200, reply)
	}
}

type ProductServiceHTTPClient interface {
	AutocompleteSearch(ctx context.Context, req *AutoCompleteRequest, opts ...http.CallOption) (rsp *AutoCompleteResponse, err error)
	CreateGoods(ctx context.Context, req *CreateGoodsRequest, opts ...http.CallOption) (rsp *CreateGoodsResponse, err error)
	DeleteGoods(ctx context.Context, req *DeleteGoodsRequest, opts ...http.CallOption) (rsp *DeleteGoodsResponse, err error)
	GoodsList(ctx context.Context, req *GoodsFilterRequest, opts ...http.CallOption) (rsp *GoodsListResponse, err error)
	SearchGoods(ctx context.Context, req *SearchGoodsRequest, opts ...http.CallOption) (rsp *SearchGoodsResponse, err error)
	UpdateGoods(ctx context.Context, req *UpdateGoodsRequest, opts ...http.CallOption) (rsp *UpdateGoodsResponse, err error)
}

type ProductServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewProductServiceHTTPClient(client *http.Client) ProductServiceHTTPClient {
	return &ProductServiceHTTPClientImpl{client}
}

func (c *ProductServiceHTTPClientImpl) AutocompleteSearch(ctx context.Context, in *AutoCompleteRequest, opts ...http.CallOption) (*AutoCompleteResponse, error) {
	var out AutoCompleteResponse
	pattern := "/v1/goods/autocomplete"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductServiceAutocompleteSearch))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ProductServiceHTTPClientImpl) CreateGoods(ctx context.Context, in *CreateGoodsRequest, opts ...http.CallOption) (*CreateGoodsResponse, error) {
	var out CreateGoodsResponse
	pattern := "/v1/goods"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProductServiceCreateGoods))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ProductServiceHTTPClientImpl) DeleteGoods(ctx context.Context, in *DeleteGoodsRequest, opts ...http.CallOption) (*DeleteGoodsResponse, error) {
	var out DeleteGoodsResponse
	pattern := "/v1/goods/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductServiceDeleteGoods))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ProductServiceHTTPClientImpl) GoodsList(ctx context.Context, in *GoodsFilterRequest, opts ...http.CallOption) (*GoodsListResponse, error) {
	var out GoodsListResponse
	pattern := "/v1/goods"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductServiceGoodsList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ProductServiceHTTPClientImpl) SearchGoods(ctx context.Context, in *SearchGoodsRequest, opts ...http.CallOption) (*SearchGoodsResponse, error) {
	var out SearchGoodsResponse
	pattern := "/v1/goods/search"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProductServiceSearchGoods))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ProductServiceHTTPClientImpl) UpdateGoods(ctx context.Context, in *UpdateGoodsRequest, opts ...http.CallOption) (*UpdateGoodsResponse, error) {
	var out UpdateGoodsResponse
	pattern := "/v1/goods/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProductServiceUpdateGoods))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
